
ϕf(x)= log1p(exp(x)) ;
Q   = 16; ns = 2;

vf = EconSim.Sim[:, 6];
st = EconSim.Sim[:, [2,8]];
dst = EconSim.Sim[:, 5];
v, vmax, vmin = normi(vf);
s, smax, smin = normi(st);

vnd = v[dst.==0];
snd = s[dst.==0, :];
vd = v[dst.==1];
sd = s[dst.==1, :][:,2];

#+++++++++++++++++++++++++++++++++
#  Neural Network for No default
#+++++++++++++++++++++++++++++++++
dataND
NetWorkND = Chain(Dense(ns, Q, ϕf), Dense(Q, 1));
Lnd(x, y) = Flux.mse(NetWorkND(x), y);
dataND = Flux.Data.DataLoader(snd', vnd')
psND = Flux.params(NetWorkND)
Flux.@epochs 10 begin
   Flux.Optimise.train!(Lnd, psND, dataND, Descent());
   display(Lnd(snd',vnd'));
end
vndhat = NetWorkND(snd');
vndhat = convert(Array{Float64}, vndhat);
dplot = [vnd vndhat'];
plot(
   dplot[1:2000, :], legend = :topleft, label = ["actual" "hat"],
   fg_legend = :transparent, legendfontsize = 6, c = [:blue :red],
   w = [0.75 0.5], style = [:solid :dash],
   title = "Value function under No Default", titlefontsize = 10,
)
#+++++++++++++++++++++++++++++++++
#  Neural Network for Default
#+++++++++++++++++++++++++++++++++
NetWorkD = Chain(Dense(1, 2, ϕf), Dense(2, 1));
Ld(x, y) = Flux.mse(NetWorkD(x), y);
dataD = Flux.Data.DataLoader(sd', vd')
psD = Flux.params(NetWorkD)
Flux.@epochs 10 begin
   Flux.Optimise.train!(Ld, psD, dataD, Descent());
   display(Ld(sd',vd'));
end
vdhat = NetWorkD(sd');
vdhat = convert(Array{Float64}, vdhat);
dplot = [vd vdhat'];
plot(
   dplot[1:200,:], legend = :topleft, label = ["actual" "hat"],
   fg_legend = :transparent, legendfontsize = 6, c = [:blue :red],
   w = [0.75 0.5], style = [:solid :dash],
   title = "Value function under Default", titlefontsize = 10,
)
